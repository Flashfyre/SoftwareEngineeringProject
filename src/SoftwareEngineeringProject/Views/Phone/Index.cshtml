@using NonFactors.Mvc.Grid;

@model PhoneModel

@inject UserManager<ApplicationUser> userManager
@inject SavedPhoneModelRepository savedPhoneModels

@{
    ViewData["Title"] = Model.PhoneModelID + " - Details";
    string[] imageURLs = Model.Phones.First().GetImageURLs();

    ApplicationUser user = await userManager.GetUserAsync(Context.User);
    bool isPhoneInWishlist = user != null && savedPhoneModels.GetAllForUserID(user.Id).Any(spm => spm.PhoneModelID == Model.PhoneModelID);
    IEnumerable<VendorPhone> vendorPhones = Model.Phones.SelectMany(p => p.VendorPhones);
    IEnumerable<string> carrierIDOptions = vendorPhones.Select(vp => vp.CarrierID).Distinct().ToList();
    IEnumerable<string> vendorIDOptions = vendorPhones.Select(vp => vp.VendorID).Distinct();
    Dictionary<string, List<string>> carrierPaymentOptions = new Dictionary<string, List<string>>();
    Dictionary<string, List<string>> carrierMemoryOptions = new Dictionary<string, List<string>>();
    Dictionary<string, List<string>> carrierColourOptions = new Dictionary<string, List<string>>();

    foreach (VendorPhone vp in vendorPhones)
    {
        if (!carrierPaymentOptions.ContainsKey(vp.PaymentType)) {
            carrierPaymentOptions.Add(vp.PaymentType, new List<string>() { vp.CarrierID });
        } else if (!carrierPaymentOptions.Keys.Contains(vp.PaymentType))
        {
            carrierPaymentOptions[vp.PaymentType].Add(vp.CarrierID);
        }
        if (!carrierMemoryOptions.ContainsKey(vp.Phone.Memory))
        {
            carrierMemoryOptions.Add(vp.Phone.Memory, new List<string>() { vp.CarrierID });
        }
        else if (!carrierMemoryOptions.Keys.Contains(vp.Phone.Memory))
        {
            carrierMemoryOptions[vp.Phone.Memory].Add(vp.CarrierID);
        }
        if (!carrierColourOptions.ContainsKey(vp.Phone.Colour))
        {
            carrierColourOptions.Add(vp.Phone.Colour, new List<string>() { vp.CarrierID });
        }
        else if (!carrierColourOptions.Keys.Contains(vp.Phone.Colour))
        {
            carrierColourOptions[vp.Phone.Colour].Add(vp.CarrierID);
        }
    }
}

<link href="~/css/phone.css" rel="stylesheet" type="text/css" />

<script type="text/javascript">
    $(document).ready(function() {
        $("#phone-carrier-select").change(function () {
            var carrierID = $(this).val();
            $("option[data-carrier-ids]").each(function () {
                $(this).prop("disabled", carrierID != "" && $(this).data("carrier-ids").split(",").indexOf(carrierID) == -1);
            });

            $("#phone-payment-option-select, phone-memory-select, phone-colour-select").each(function () {
                if ($(this).children(":selected").prop("disabled"))
                    $(this).val("").trigger("change");
            });
        });

        $(".btn-wishlist:not(.disabled)").click(function () {
            var isUndo = $(this).is(".btn-wishlist.undo"); // Whether the button is removing from the wishlist

            $(".btn-wishlist").addClass("disabled"); // Disable the wishlist button

            $.ajax({
                type: "POST",
                url: '/Wishlist/' + (!isUndo ? "AddTo" : "RemoveFrom") + 'Wishlist',
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                data: {
                    phoneModelID: '@Model.PhoneModelID',
                    __RequestVerificationToken: $("input[name=__RequestVerificationToken]").val()

                },
                dataType: "json",
                success: function (data) {
                    if (data[0]) // If the operation succeeded, change the button to its opposite
                        $(".btn-wishlist").toggleClass("undo").toggleClass("btn-success").toggleClass("btn-danger").html((isUndo ? "Add to" : "Remove from") + " My Wishlist");
                    if (data[1] != null)
                        alert(data[1]); // Display an error message if necessary
                    $(".btn-wishlist").removeClass("disabled"); // Re-enable the wishlist button
                },
                error: function () {
                    alert("An error occurred while attempting to " + (!isUndo ? "add" : "remove") + " the phone " + (!isUndo ? "to" : "from") + " your wishlist.");
                    $(".btn-wishlist").removeClass("disabled"); // Re-enable the wishlist button
                }
            });
        });

        $("select.vendor-phone-filter").change(function () {
            var tableHeaderIndex = 0;
            switch ($(this).attr("id")) {
                case "phone-carrier-select":
                    tableHeaderIndex = 5;
                    break;
                case "phone-payment-option-select":
                    tableHeaderIndex = 6;
                    break;
                case "phone-memory-select":
                    tableHeaderIndex = 8;
                    break;
                case "phone-colour-select":
                    tableHeaderIndex = 9;
                    break;
                default:
                    break;
            }
            $("#vendor-phones-grid th:nth-child(" + tableHeaderIndex + ") > span.mvc-grid-filter").click();
        });

        var CustomTextFilter = (function () {
            function CustomTextFilter() {
            }

            CustomTextFilter.prototype = {
                render: function (grid, popup, filter) {
                    var filterLang = $.fn.mvcgrid.lang.Filter;
                    var operator = $.fn.mvcgrid.lang.Operator;
                    var lang = $.fn.mvcgrid.lang.Text;
                },
                init: function (grid, column, popup) {
                    this.bindValue(grid, column, popup);
                    this.bindApply(grid, column, popup);
                    this.bindCancel(grid, column, popup);
                    var value = "";
                    switch (column.name) {
                        case "CarrierID":
                            value = $("#phone-carrier-select").val();
                            break;
                        case "PaymentType":
                            value = $("#phone-payment-option-select").val();
                            break;
                        case "Phone.Memory":
                            value = $("#phone-memory-select").val();
                            break;
                        case "Phone.Colour":
                            value = $("#phone-colour-select").val();
                            break;
                        default:
                            break;
                    }
                    popup.removeClass('open');
                    console.log(value);
                    if (value != "") {
                        column.filter.operator = "";
                        column.filter.first.type = "Equals";
                        column.filter.first.val = value;

                        grid.applyFilter(grid, column);
                    } else
                        grid.cancelFilter(grid, column);

                    grid.reload(grid);
                },

                bindValue: function (grid, column, popup) { },
                bindApply: function (grid, column, popup) { },
                bindCancel: function (grid, column, popup) { }
            };

            return CustomTextFilter;
        })();

        $(".mvc-grid").mvcgrid({
            filters: {
                'CustomTextFilter': new CustomTextFilter()
            },
            rowClicked: function (grid, row, data, e) {
                window.location.href = data["URL"];
            }
        });
    });
</script>

<div class="row">
    <h2>@Model.PhoneModelID</h2>
    <hr />
    <div id="phone-image-container" class="col-md-3">
        <div id="phone-images-carousel" class="carousel slide" data-ride="carousel" data-interval="6000">
            <ol class="carousel-indicators">
                @for (int u = 0; u < imageURLs.Count(); u++)
                {
                    <li data-target="#phone-images-carousel" data-slide-to="@u"@{@Html.Raw(u == 0 ? "class=\"active\"" : "");}></li>
                }
            </ol>
            <div class="carousel-inner" role="listbox">
                @for (int u = 0; u < imageURLs.Count(); u++)
                {
                    <div class="@("item" + (u == 0 ? " active" : ""))">
                        <img src="@imageURLs[u]" class="img-responsive" />
                    </div>
                }
            </div>
            @if (imageURLs.Count() > 1)
            {
                <a class="left carousel-control" href="#phone-images-carousel" role="button" data-slide="prev">
                    <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
                    <span class="sr-only">Previous</span>
                </a>
                <a class="right carousel-control" href="#phone-images-carousel" role="button" data-slide="next">
                    <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
                    <span class="sr-only">Next</span>
                </a>
            }
        </div>
        @if (!isPhoneInWishlist)
        {
            <button class="btn btn-success btn-block btn-wishlist@{ @Html.Raw(user == null ? " disabled" : ""); }">Add to My Wishlist</button>
        }
        else
        {
            <button class="btn btn-danger btn-block btn-wishlist undo@{ @Html.Raw(user == null ? " disabled" : ""); }">Remove from My Wishlist</button>
        }
        @Html.AntiForgeryToken()
        <br />
        <h2>Price Comparison</h2>
        <hr />
        <h4>Details</h4>
        <br />
        <span>
            Carrier
            <select id="phone-carrier-select" class="form-control vendor-phone-filter">
                <option value="">--Carrier--</option>
                @foreach (string carrierID in carrierIDOptions.OrderBy(c => c == "No Carrier"))
                {
                    <option>@carrierID</option>
                }
            </select>
        </span>
        <br />
        <span>
            Payment Option
            <select id="phone-payment-option-select" class="form-control vendor-phone-filter">
                <option value="">--Payment Option--</option>
                @foreach (string payment in carrierPaymentOptions.Keys.OrderBy(p => p).OrderBy(p => p == "No Contract"))
                {
                    <option data-carrier-ids="@string.Join(",", carrierPaymentOptions[payment].ToArray())" value="@payment">@payment</option>
                }
            </select>
        </span>
        <br />
        <span>
            Internal Memory
            <select id="phone-memory-select" class="form-control vendor-phone-filter">
                <option value="">--Internal Memory--</option>
                @foreach (string memory in carrierMemoryOptions.Keys.OrderBy(m => FormatHelper.PadNumbers(m)).OrderBy(m => m == "N/A"))
                {
                    <option data-carrier-ids="@string.Join(",", carrierMemoryOptions[memory].ToArray())" value="@memory">@memory</option>
                }
            </select>
        </span>
        <br />
        <span>
            Colour
            <select id="phone-colour-select" class="form-control vendor-phone-filter">
                <option value="">--Colour--</option>
                @foreach (string colour in carrierColourOptions.Keys.OrderBy(c => c).OrderBy(c => c == "N/A"))
                {
                    <option data-carrier-ids="@string.Join(",", carrierColourOptions[colour].ToArray())" value="@colour">@colour</option>
                }
            </select>
        </span>
    </div>
    <div class="col-md-9">
        <h4>Vendors</h4>
        <hr />
        @Html.AjaxGrid(Url.Action("VendorPhonesGrid", new { PhoneModelID = Model.PhoneModelID }))
    </div>
</div>
<div class="row">
    <h3>Specifications</h3>
    <hr />
    @Html.Raw(ViewData["Description"])
</div>